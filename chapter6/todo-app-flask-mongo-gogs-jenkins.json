{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "todo-app-flask-mongo-gogs",
    "annotations": {
      "openshift.io/display-name": "Flask + MongoDB (Ephemeral)",
      "description": "An example Flask application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.\n\nWARNING: MongoDB instance is ephemeral so any data will be lost on pod destruction.",
      "tags": "quickstart,python,flask,database,mongodb,gogs,jenkins",
      "iconClass": "icon-python,icon-mongodb,icon-jenkins",
      "template.openshift.io/long-description": "This template defines resources needed to develop a Flask based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
      "template.openshift.io/provider-display-name": "OpenShift In Action",
      "template.openshift.io/documentation-url": "https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md"
    }
  },
  "message": "The following service(s) have been created in your project: ${APPLICATION_NAME}, ${MONGODB_APPLICATION_NAME}.\n\n${MONGODB_APPLICATION_NAME} Connection Info:\n       Username: ${MONGODB_USER}\n       Password: ${MONGODB_PASSWORD}\n       Database Name: ${MONGODB_DATABASE}\n       Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}/${MONGODB_DATABASE}",
  "labels": {
    "app": "todo-app-flask-mongo-template"
  },
  "parameters": [
    {
      "description": "The name for the todo-app-flask-mongo application.",
      "displayName": "Application Name",
      "name": "APPLICATION_NAME",
      "value": "todo-app-flask-mongo",
      "required": true
    },
    {
      "description": "The name for the mongodb application.",
      "displayName": "Mongodb App",
      "name": "MONGODB_APPLICATION_NAME",
      "value": "mongodb",
      "required": true
    },
    {
      "description": "Custom hostname for nationalparks-py application.  Leave blank for default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>",
      "displayName": "Application route",
      "name": "APPLICATION_HOSTNAME"
    },
    {
      "description": "Git source URI for application",
      "displayName": "Git source repository",
      "name": "GIT_URI",
      "value": "https://github.com/OpenShiftInAction/chapter6",
      "required": true
    },
    {
      "name": "CONTEXT_DIR",
      "displayName": "Context Directory",
      "description": "Set this to the relative path to your project if it is not in the root of your repository.",
      "value": "openshift-cicd-flask-mongo"
    },
    {
      "description": "Git branch/tag reference",
      "displayName": "Git branch/tag reference",
      "name": "GIT_REF",
      "value": "master",
      "required": true
    },
    {
      "description": "Database name",
      "displayName": "Database name",
      "name": "MONGODB_DATABASE",
      "value": "tododb",
      "required": true
    },
    {
      "description": "Disable data file preallocation.",
      "name": "MONGODB_NOPREALLOC"
    },
    {
      "description": "Set MongoDB to use a smaller default data file size.",
      "name": "MONGODB_SMALLFILES"
    },
    {
      "description": "Runs MongoDB in a quiet mode that attempts to limit the amount of output.",
      "name": "MONGODB_QUIET"
    },
    {
      "description": "Database user name",
      "displayName": "Database user name",
      "name": "MONGODB_USER",
      "from": "user[a-zA-Z0-9]{3}",
      "generate": "expression",
      "required": true
    },
    {
      "description": "Database user password",
      "displayName": "Database user password",
      "name": "MONGODB_PASSWORD",
      "from": "[a-zA-Z0-9]{8}",
      "generate": "expression",
      "required": true
    },
    {
      "description": "Database admin password",
      "displayName": "Database admin password",
      "name": "MONGODB_ADMIN_PASSWORD",
      "from": "[a-zA-Z0-9]{8}",
      "generate": "expression",
      "required": true
    },
    {
      "name": "MEMORY_LIMIT",
      "displayName": "Memory Limit (Flask)",
      "required": true,
      "description": "Maximum amount of memory the Flask container can use.",
      "value": "128Mi"
    },
    {
      "name": "MONGO_MEMORY_LIMIT",
      "displayName": "Memory Limit (MongoDB)",
      "required": true,
      "description": "Maximum amount of memory the MongoDB container can use.",
      "value": "128Mi"
    },
    {
      "description": "Github trigger secret",
      "displayName": "GitHub Trigger",
      "name": "GITHUB_TRIGGER_SECRET",
      "from": "[a-zA-Z0-9]{8}",
      "generate": "expression",
      "required": true
    },
    {
      "description": "Generic build trigger secret",
      "displayName": "Generic Trigger",
      "name": "GENERIC_TRIGGER_SECRET",
      "from": "[a-zA-Z0-9]{8}",
      "generate": "expression",
      "required": true
    },
    {
      "description": "Whether to enable verbose logging of Jenkinsfile steps in pipeline",
      "displayName": "Verbose",
      "name": "VERBOSE",
      "required": true,
      "value": "false"
    }
  ],
  "objects": [
    {
      "apiVersion": "v1",
      "groupNames": null,
      "kind": "RoleBinding",
      "metadata": {
        "name": "default_edit"
      },
      "roleRef": {
        "name": "edit"
      },
      "subjects": [
        {
          "kind": "ServiceAccount",
          "name": "default"
        }
      ]
    },
    {
      "kind": "ConfigMap",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APPLICATION_NAME}",
        "labels": {
          "name": "config"
        }
      },
      "data": {
        "db.user": "${MONGODB_USER}",
        "db.password": "${MONGODB_PASSWORD}",
        "db.name": "${MONGODB_DATABASE}",
        "db.properties": "db.user=${MONGODB_USER}\ndb.password=${MONGODB_PASSWORD}\ndb.name=${MONGODB_DATABASE}",
        "application.properties": "spring.data.mongodb.uri=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}:27017/${MONGODB_DATABASE}"
      }
    },
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MONGODB_APPLICATION_NAME}",
        "labels": {
          "name": "${MONGODB_APPLICATION_NAME}"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "mongo",
            "protocol": "TCP",
            "port": 27017,
            "targetPort": 27017
          }
        ],
        "selector": {
          "name": "${MONGODB_APPLICATION_NAME}"
        },
        "type": "ClusterIP",
        "sessionAffinity": "None"
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MONGODB_APPLICATION_NAME}",
        "labels": {
          "name": "${MONGODB_APPLICATION_NAME}"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate",
          "recreateParams": {
            "timeoutSeconds": 600
          },
          "resources": {}
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${MONGODB_APPLICATION_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "openshift",
                "name": "mongodb:3.2"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "test": false,
        "selector": {
          "name": "${MONGODB_APPLICATION_NAME}"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "${MONGODB_APPLICATION_NAME}"
            }
          },
          "spec": {
            "volumes": [
              {
                "name": "mongodb-data",
                "emptyDir": {}
              }
            ],
            "containers": [
              {
                "name": "${MONGODB_APPLICATION_NAME}",
                "image": "${MONGODB_APPLICATION_NAME}",
                "ports": [
                  {
                    "containerPort": 27017,
                    "protocol": "TCP"
                  }
                ],
                "env": [
                  {
                    "name": "KUBERNETES_NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  },
                  {
                    "name": "MONGODB_USER",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.user"
                      }
                    }
                  },
                  {
                    "name": "MONGODB_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.password"
                      }
                    }
                  },
                  {
                    "name": "MONGODB_DATABASE",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.name"
                      }
                    }
                  },
                  {
                    "name": "MONGODB_ADMIN_PASSWORD",
                    "value": "${MONGODB_ADMIN_PASSWORD}"
                  }
                ],
                "resources": {
                  "limits": {
                    "memory": "${MONGO_MEMORY_LIMIT}"
                  }
                },
                "volumeMounts": [
                  {
                    "name": "mongodb-data",
                    "mountPath": "/var/lib/mongodb/data"
                  }
                ],
                "livenessProbe": {
                  "tcpSocket": {
                    "port": 27017
                  },
                  "initialDelaySeconds": 30,
                  "timeoutSeconds": 1,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "failureThreshold": 3
                },
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "/bin/sh",
                      "-i",
                      "-c",
                      "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                    ]
                  },
                  "initialDelaySeconds": 3,
                  "timeoutSeconds": 1,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "failureThreshold": 3
                },
                "terminationMessagePath": "/dev/termination-log",
                "imagePullPolicy": "IfNotPresent",
                "securityContext": {
                  "capabilities": {},
                  "privileged": false
                }
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "ClusterFirst",
            "securityContext": {}
          }
        }
      }
    },
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APPLICATION_NAME}"
      },
      "spec": {
        "tags": [
          {
            "name": "latest"
          }
        ]
      }
    },
    {
      "kind": "BuildConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APPLICATION_NAME}",
        "labels": {
          "build": "${APPLICATION_NAME}"
        }
      },
      "spec": {
        "triggers": [
          {
            "type": "GitHub",
            "github": {
              "secret": "${GITHUB_TRIGGER_SECRET}"
            }
          },
          {
            "type": "Generic",
            "generic": {
              "secret": "${GENERIC_TRIGGER_SECRET}"
            }
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange"
          }
        ],
        "runPolicy": "Serial",
        "source": {
          "type": "Git",
          "git": {
            "uri": "${GIT_URI}",
            "ref": "${GIT_REF}"
          },
          "contextDir": "${CONTEXT_DIR}"
        },
        "strategy": {
          "type": "Source",
          "sourceStrategy": {
            "from": {
              "kind": "ImageStreamTag",
              "namespace": "openshift",
              "name": "python:3.5"
            },
            "incremental": false
          }
        },
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${APPLICATION_NAME}:latest"
          }
        },
        "resources": {},
        "postCommit": {}
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APPLICATION_NAME}-blue"
      },
      "spec": {
        "strategy": {
          "type": "Rolling",
          "rollingParams": {
            "updatePeriodSeconds": 1,
            "intervalSeconds": 1,
            "timeoutSeconds": 600,
            "maxUnavailable": "25%",
            "maxSurge": "25%"
          },
          "resources": {}
        },
        "triggers": [
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${APPLICATION_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APPLICATION_NAME}:blue"
              }
            }
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${APPLICATION_NAME}-blue"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "${APPLICATION_NAME}-blue"
            },
            "name": "${APPLICATION_NAME}-blue"
          },
          "spec": {
            "containers": [
              {
                "name": "${APPLICATION_NAME}",
                "image": "${APPLICATION_NAME}",
                "ports": [
                  {
                    "containerPort": 8080,
                    "protocol": "TCP"
                  }
                ],
                "env": [
                  {
                    "name": "KUBERNETES_NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  },
                  {
                    "name": "DB_HOST",
                    "value": "${MONGODB_APPLICATION_NAME}"
                  },
                  {
                    "name": "DB_USERNAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.user"
                      }
                    }
                  },
                  {
                    "name": "DB_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.password"
                      }
                    }
                  },
                  {
                    "name": "DB_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.name"
                      }
                    }
                  },
                  {
                    "name": "MONGO_CONNECTION_URI",
                    "value": "mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}/${MONGODB_DATABASE}"
                  }
                ],
                "resources": {
                  "limits": {
                    "memory": "${MEMORY_LIMIT}"
                  }
                },
                "terminationMessagePath": "/dev/termination-log",
                "imagePullPolicy": "IfNotPresent"
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "ClusterFirst",
            "securityContext": {}
          }
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APPLICATION_NAME}-green"
      },
      "spec": {
        "strategy": {
          "type": "Rolling",
          "rollingParams": {
            "updatePeriodSeconds": 1,
            "intervalSeconds": 1,
            "timeoutSeconds": 600,
            "maxUnavailable": "25%",
            "maxSurge": "25%"
          },
          "resources": {}
        },
        "triggers": [
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${APPLICATION_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APPLICATION_NAME}:green"
              }
            }
          }
        ],
        "replicas": 1,
        "test": false,
        "selector": {
          "name": "${APPLICATION_NAME}-green"
        },
        "template": {
          "metadata": {
            "labels": {
              "name": "${APPLICATION_NAME}-green"
            },
            "name": "${APPLICATION_NAME}-green"
          },
          "spec": {
            "containers": [
              {
                "name": "${APPLICATION_NAME}",
                "image": "${APPLICATION_NAME}",
                "ports": [
                  {
                    "containerPort": 8080,
                    "protocol": "TCP"
                  }
                ],
                "env": [
                  {
                    "name": "KUBERNETES_NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  },
                  {
                    "name": "DB_HOST",
                    "value": "${MONGODB_APPLICATION_NAME}"
                  },
                  {
                    "name": "DB_USERNAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.user"
                      }
                    }
                  },
                  {
                    "name": "DB_PASSWORD",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.password"
                      }
                    }
                  },
                  {
                    "name": "DB_NAME",
                    "valueFrom": {
                      "configMapKeyRef": {
                        "name": "${APPLICATION_NAME}",
                        "key": "db.name"
                      }
                    }
                  },
                  {
                    "name": "MONGO_CONNECTION_URI",
                    "value": "mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}/${MONGODB_DATABASE}"
                  }
                ],
                "resources": {
                  "limits": {
                    "memory": "${MEMORY_LIMIT}"
                  }
                },
                "terminationMessagePath": "/dev/termination-log",
                "imagePullPolicy": "IfNotPresent"
              }
            ],
            "restartPolicy": "Always",
            "terminationGracePeriodSeconds": 30,
            "dnsPolicy": "ClusterFirst",
            "securityContext": {}
          }
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
	      "labels": {
          "name": "${APPLICATION_NAME}"
        },
        "annotations": {
          "service.alpha.openshift.io/dependencies": "[{\"name\": \"${MONGODB_APPLICATION_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]"
        },
        "name": "${APPLICATION_NAME}-blue"
      },
      "spec": {
        "ports": [
          {
            "name": "web",
            "port": 8080,
            "targetPort": 5000
          }
        ],
        "selector": {
          "name": "${APPLICATION_NAME}-blue"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
	"labels": {
          "name": "${APPLICATION_NAME}"
        },
        "annotations": {
          "service.alpha.openshift.io/dependencies": "[{\"name\": \"${MONGODB_APPLICATION_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]"
        },
        "name": "${APPLICATION_NAME}-green"
      },
      "spec": {
        "ports": [
          {
            "name": "web",
            "port": 8080,
            "targetPort": 5000
          }
        ],
        "selector": {
          "name": "${APPLICATION_NAME}-green"
        }
      }
    },
    {
          "kind": "Route",
          "apiVersion": "v1",
          "metadata": {
            "name": "${APPLICATION_NAME}",
            "labels": {
              "name": "${APPLICATION_NAME}"
            }
          },
          "spec": {
            "host": "${APPLICATION_HOSTNAME}",
     	"alternateBackends": [
              {
                "name": "${APPLICATION_NAME}-green",
                "weight": "0"
              }
            ],
            "to": {
              "kind": "Service",
              "name": "${APPLICATION_NAME}",
              "weight": 100
            },
            "port": {
              "targetPort": "8080-tcp"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "blue-${APPLICATION_NAME}"
          },
          "spec": {
            "to": {
              "kind": "Service",
              "name": "${APPLICATION_NAME}-blue"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "green-${APPLICATION_NAME}"
          },
          "spec": {
            "to": {
              "kind": "Service",
              "name": "${APPLICATION_NAME}-green"
            }
          }
        },
    {
      "apiVersion": "v1",
      "kind": "BuildConfig",
      "metadata": {
        "annotations": {
          "pipeline.alpha.openshift.io/uses": "[{\"name\": \"${APPLICATION_NAME}\", \"namespace\": \"\", \"kind\": \"DeploymentConfig\"}]"
        },
        "creationTimestamp": null,
        "labels": {
          "name": "bluegreen-pipeline"
        },
        "name": "bluegreen-pipeline"
      },
      "spec": {
        "strategy": {
          "jenkinsPipelineStrategy": {
            "jenkinsfile": "try {\n   timeout(time: 20, unit: 'MINUTES') {\n      def appName=\"${APPLICATION_NAME}\"\n      def project=\"\"\n      def tag=\"blue\"\n      def altTag=\"green\"\n      def verbose=\"${VERBOSE}\"\n\n      node {\n        project = env.PROJECT_NAME\n        stage(\"Initialize\") {\n          sh \"oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice\"\n          activeService = readFile('activeservice').trim()\n          if (activeService == \"${appName}-blue\") {\n            tag = \"green\"\n            altTag = \"blue\"\n          }\n          sh \"oc get route ${tag}-${appName} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost\"\n          routeHost = readFile('routehost').trim()\n        }\n\n        stage(\"Build\") {\n          echo \"building tag ${tag}\"\n          openshiftBuild buildConfig: appName, showBuildLogs: \"true\", verbose: verbose\n        }\n\n        stage(\"Deploy Test\") {\n          openshiftTag srcStream: appName, srcTag: 'latest', destinationStream: appName, destinationTag: tag, verbose: verbose\n          openshiftVerifyDeployment deploymentConfig: \"${appName}-${tag}\", verbose: verbose\n        }\n\n        stage(\"Test\") {\n          input message: \"Test deployment: http://${routeHost}. Approve?\", id: \"approval\"\n        }\n\n        stage(\"Go Live\") {\n          sh \"oc set -n ${project} route-backends ${appName} ${appName}-${tag}=100 ${appName}-${altTag}=0 --loglevel=4\"\n        }\n      }\n   }\n} catch (err) {\n   echo \"in catch block\"\n   echo \"Caught: ${err}\"\n   currentBuild.result = 'FAILURE'\n   throw err\n}"
          },
          "type": "JenkinsPipeline"
        },
        "triggers": [
          {
            "github": {
              "secret": "${GITHUB_TRIGGER_SECRET}"
            },
            "type": "GitHub"
          },
          {
            "generic": {
              "secret": "${GENERIC_WEBHOOK_SECRET}"
            },
            "type": "Generic"
          }
        ]
      }
    }
  ]
}